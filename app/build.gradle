import java.util.regex.Pattern

//ext.mainApp = true  //设置为true，表示此module为主app module，一直以application方式编译
println("app luopeng gradle")
if(isSupportDebugLibrary){
    apply plugin: 'com.github.rpc.modularization'
}else{
    apply plugin: 'com.android.application'
}
apply from: rootProject.file('modularization.gradle')


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "com.github.rpc.modularization"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}



dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    api app_dependencies.rpc_modularization
    if(isSupportDebugLibrary){
        addModule 'module_topic' //
    }else{
        api project(":module_topic")
    }

    if(isSupportDebugLibrary){
        addModule 'module_login' //
    }else{
        api project(":module_login")
    }

    if(isSupportDebugLibrary){
        addModule 'module_personalcenter'//暂时只支持这种写法
    }else{
        api project(":module_personalcenter") //这个也后面再支持
    }

    // app config阶段module_personalcenter是以application存在才能出现可调试debug选项中
    // 为了方便开发引入接口工程，其实app本质也是业务模块
    api project(':module_personalcenter_api')
    implementation project(path: ':module_login_api')
    implementation project(path: ':module_login')

    implementation project(path: ':module_test')
}
